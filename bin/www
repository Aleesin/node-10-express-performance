#!/usr/bin/env node

const cluster = require("cluster");
const numCPUs = require("os").cpus().length;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on("exit", (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  /**
   * Module dependencies.
   */
  require("dotenv").config();

  const Server = require("../src/server");
  const app = new Server().express;
  const debug = require("debug")("node-docker-sample:server");
  const http = require("http");

  /**
   * Normalize a port into a number, string, or false.
   */

  const normalizePort = val => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  };

  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);

  const host = process.env.HOST || "0.0.0.0";

  /**
   * Event listener for HTTP server "error" event.
   */

  const onError = error => {
    if (error.syscall !== "listen") {
      throw error;
    }

    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  };

  /**
   * Event listener for HTTP server "listening" event.
   */

  const onListening = () => {
    const addr = server.address();
    const bind =
      typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
  };

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port, host);
  server.on("error", onError);
  server.on("listening", onListening);
}
